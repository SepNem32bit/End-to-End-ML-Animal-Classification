name: workflow

on:
#triggers
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
       #Linting ensures code quality by checking for syntax errors, code style violations, or potential bugs.
      - name: Lint code
        run: echo "Linting repository"
       #Unit Tests ensure the application’s logic works as expected.
      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    #It includes building a Docker image, pushing it to a container registry like Amazon ECR, and deploying it.
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      #Installs necessary tools like jq (for JSON parsing) and unzip in case they are needed during deployment.
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      #Uses AWS credentials stored securely in GitHub Secrets.
      #Allows the workflow to authenticate and interact with AWS services like ECR.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

        #This step logs into Amazon ECR (Elastic Container Registry), where Docker images will be stored.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
  #It is responsible for deploying your Docker container to a self-hosted server, like an AWS EC2 instance or an on-prem server.      
  Continuous-Deployment:
    needs: build-and-push-ecr-image
    #It uses a self-hosted runner, meaning it is executed on a physical or virtual machine that you manage.
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        #AWS Secrets are securely stored in your repository settings under Settings → Secrets and variables → Actions.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        #It allows you to pull Docker images from your private ECR repository
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      #This command pulls the latest Docker image from ECR
      - name: Pull latest images
        run: |
         docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         
      # - name: Stop and remove container if running
      #   run: |
      #    docker ps -q --filter "name=AnimalClassification" | grep -q . && docker stop AnimalClassification && docker rm -fv AnimalClassification
       
      - name: Run Docker Image to serve users
        run: |
         docker run -d -p 8080:8080 --name=AnimalClassification -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      - name: Clean previous images and containers
        run: |
         docker system prune -f